swagger: "2.0"
info:
  description: "To run API, use `--api-addr=yourserver:3000` CLI argument or enable it in config file"
  version: "1.0.0"
  title: "rportd HTTP(S) API"
host: "yourserver:3000"
basePath: "/api/v1"
securityDefinitions:
  basic_auth:
    type: basic
    description: "HTTP-basic authentication works for all routes"
  bearer_auth:
    description: "Instead of HTTP basic authentication you can retrieve a bearer token using /login endpoint. Send the retrieved token in 'Authorization: Bearer <TOKEN>' header"
    type: apiKey # actually apiKey is not correct type but 'bearer' type is not supported in swagger v2.0
    in: header
    name: "Authorization"
security:
  - bearer_auth: []
  - basic_auth: []
schemes:
  - http
  - https
tags:
  - name: "Login"
    description: For more details https://github.com/cloudradar-monitoring/rport/blob/master/docs/api-auth.md
  - name: "Status"
  - name: "Clients and Tunnels"
    description: For more details https://github.com/cloudradar-monitoring/rport/blob/master/docs/managing-tunnels.md
  - name: "Client Groups"
    description: For more details https://github.com/cloudradar-monitoring/rport/blob/master/docs/client-groups.md
  - name: "Rport Client Auth Credentials"
    description: For more details https://github.com/cloudradar-monitoring/rport/blob/master/docs/client-auth.md
  - name: "Commands"
    description: For more details https://github.com/cloudradar-monitoring/rport/blob/master/docs/command-execution.md
  - name: "Users"
    description: For more details https://github.com/cloudradar-monitoring/rport/blob/master/docs/no01-user.md
paths:
  /login:
    get:
      tags:
        - "Login"
      summary: "Generate or renew auth token. Requires HTTP-basic authorization"
      description: ""
      parameters:
        - name: "token-lifetime"
          in: "query"
          description: "initial lifetime in seconds. Max value is 90 days. Default: 10 min"
          required: false
          default: 360
          maximum: 7776000
          type: "integer"
      produces:
        - "application/json"
      responses:
        "200":
          description: "Successful Operation"
          schema:
            type: "object"
            properties:
              data:
                type: "object"
                properties:
                  token:
                    type: "string"
              meta:
                type: "object"
        "400":
          description: "Invalid parameters"
          schema:
            $ref: "#/definitions/ErrorPayload"
        "401":
          description: "Unauthorized"
          schema:
            $ref: "#/definitions/ErrorPayload"
        "500":
          description: "Invalid Operation"
          schema:
            $ref: "#/definitions/ErrorPayload"
    post:
      tags:
        - "Login"
      summary: "Generate or renew auth token. Requires username and password provided in request body"
      description: "username and password parameters are required. They can be provided either in JSON either in x-www-formurlencoded format"
      # swagger 2.0 does not allow describing a method that accepts multiple content-types
      parameters:
        - name: "token-lifetime"
          in: "query"
          description: "initial lifetime in seconds. Max value is 90 days. Default: 10 min"
          required: false
          default: 360
          maximum: 7776000
          type: "integer"
      produces:
        - "application/json"
      responses:
        "200":
          description: ""
          schema:
            type: "object"
            properties:
              data:
                type: "object"
                properties:
                  token:
                    type: "string"
              meta:
                type: "object"
        "400":
          description: "Invalid parameters"
          schema:
            $ref: "#/definitions/ErrorPayload"
        "401":
          description: "Unauthorized"
          schema:
            $ref: "#/definitions/ErrorPayload"
        "500":
          description: "Invalid Operation"
          schema:
            $ref: "#/definitions/ErrorPayload"
    delete:
      tags:
        - "Login"
      summary: "Revoke token (logoff). Requires Bearer authorization provided"
      description: ""
      produces:
        - "application/json"
      responses:
        "204":
          description: "Token revoked"
        "400":
          description: "Invalid parameters"
          schema:
            $ref: "#/definitions/ErrorPayload"
        "500":
          description: "Invalid Operation"
          schema:
            $ref: "#/definitions/ErrorPayload"
  /me:
    get:
      tags:
        - "Login"
      summary: "Return currently logged in user and groups the user belongs to"
      description: ""
      produces:
        - "application/json"
      responses:
        "200":
          description: "Successful Operation"
          schema:
            type: "object"
            properties:
              data:
                type: "object"
                properties:
                  user:
                    type: "string"
                  groups:
                    type: "array"
                    items:
                      type: string
              meta:
                type: "object"
        "404":
          description: "User not found"
          schema:
            $ref: "#/definitions/ErrorPayload"
        "500":
          description: "Invalid Operation"
          schema:
            $ref: "#/definitions/ErrorPayload"
  /me/ip:
    get:
      tags:
        - "Login"
      summary: "Return a public ip address of a client who makes the request."
      description: ""
      produces:
        - "application/json"
      responses:
        "200":
          description: "Client's ip address"
          schema:
            type: "object"
            properties:
              data:
                type: "object"
                properties:
                  ip:
                    type: "string"
  /status:
    get:
      tags:
        - "Status"
      summary: "Get information about rport server"
      description: "Show health status, server version, etc"
      produces:
        - "application/json"
      responses:
        "200":
          description: "Successful Operation"
          schema:
            type: "object"
            properties:
              data:
                type: "object"
                properties:
                  version:
                    type: "string"
                  clients_connected:
                    type: "integer"
                  clients_disconnected:
                    type: "integer"
                  clients_auth_source:
                    description: "The source of clients authentication credentials"
                    type: "string"
                    enum: ["Static Credentials", "File", "DB"]
                  clients_auth_mode:
                    description: "Shows whether it's allowed or not to create/update/delete clients authentication credentials"
                    type: "string"
                    enum: ["Read Only", "Read Write"]
                  fingerprint:
                    type: "string"
                  connect_url:
                    type: "string"
              meta:
                type: "object"
        "500":
          description: "Invalid Operation"
          schema:
            $ref: "#/definitions/ErrorPayload"
  /clients:
    get:
      tags:
        - "Clients and Tunnels"
      parameters:
        - name: "sort"
          in: "query"
          description: "Sort option `-<field>`(desc) or `<field>`(asc). `<field>` can be one of `'id', 'name', 'os', 'hostname', 'version'`. For example, `&sort=-name` or `&sort=hostname`, etc"
          required: false
          type: "string"
      summary: "List all active and disconnected client connections. By default sorted by ID in asc order"
      description: ""
      produces:
        - "application/json"
      responses:
        "200":
          description: "success response"
          schema:
            type: "object"
            properties:
              data:
                type: "array"
                items:
                  $ref: "#/definitions/Client"
        "400":
          description: "invalid request parameters"
          schema:
            $ref: "#/definitions/ErrorPayload"
        "500":
          description: "invalid operation"
          schema:
            $ref: "#/definitions/ErrorPayload"
  /clients/{client_id}/tunnels:
    parameters:
      - name: "client_id"
        in: "path"
        description: "unique client id retrieved previously"
        required: true
        type: "string"
      - name: "local"
        in: "query"
        description: "local refers to the local port of the rport server to use for a new tunnel, e.g. '3390' or '0.0.0.0:3390'. If local is not specified, a random free server port will be selected automatically"
        required: false
        type: "string"
      - name: "remote"
        in: "query"
        description: "remote address endpoint, e.g. '3389', '0.0.0.0:22' or '192.168.178.1:80', etc"
        required: true
        type: "string"
      - name: "scheme"
        in: "query"
        description: "URI scheme to be used. For example, 'ssh', 'rdp', etc."
        required: false
        type: "string"
      - name: "acl"
        in: "query"
        description: "ACL, IP addresses or ranges who is allowed to use the tunnel. For example, '142.78.90.8,201.98.123.0/24'"
        required: false
        type: "string"
      - name: "check_port"
        in: "query"
        description: "A flag whether to check availability of a public port (remote). By default check is enabled. To disable it specify 'check_port=0'."
        required: false
        type: "string"
      - name: "idle-timeout-minutes"
        in: "query"
        description: "Auto-close the tunnel after given period of inactivity in minutes. If 0 or not provided - auto-closing is disabled."
        required: false
        type: "integer"
        maximum: 10080
        minimum: 0
    put:
      tags:
        - "Clients and Tunnels"
      summary: "Request a new tunnel for an active client connection"
      description: ""
      produces:
        - "application/json"
      responses:
        "200":
          description: "success response"
          schema:
            type: "object"
            properties:
              data:
                type: "object"
                $ref: "#/definitions/Tunnel"
        "400":
          description: "invalid parameters. Error codes: ERR_CODE_LOCAL_PORT_IN_USE, ERR_CODE_REMOTE_PORT_NOT_OPEN, ERR_CODE_INVALID_ACL, ERR_CODE_TUNNEL_EXIST, ERR_CODE_TUNNEL_TO_PORT_EXIST, ERR_CODE_URI_SCHEME_LENGTH_EXCEED, ERR_CODE_INVALID_IDLE_TIMEOUT."
          schema:
            $ref: "#/definitions/ErrorPayload"
        "404":
          description: "specified client does not exist, already terminated ot disconnected"
          schema:
            $ref: "#/definitions/ErrorPayload"
        "409":
          description: "can't create requested tunnel. Probably port already busy"
          schema:
            $ref: "#/definitions/ErrorPayload"
        "500":
          description: "invalid operation"
          schema:
            $ref: "#/definitions/ErrorPayload"
  /clients/{client_id}/tunnels/{tunnel_id}:
    parameters:
      - name: "client_id"
        in: "path"
        description: "unique client id retrieved previously"
        required: true
        type: "string"
      - name: "tunnel_id"
        in: "path"
        description: "unique tunnel id retrieved previously"
        required: true
        type: "string"
      - name: "force"
        in: "query"
        description: "If true, terminate a tunnel even when it is still active."
        required: false
        type: "boolean"
    delete:
      tags:
        - "Clients and Tunnels"
      summary:  "Terminate a specified tunnel"
      description: ""
      responses:
        "204":
          description: "tunnel terminated"
        "400":
          description: "invalid parameters"
          schema:
            $ref: "#/definitions/ErrorPayload"
        "404":
          description: "specified client or tunnel does not exist or already terminated"
          schema:
            $ref: "#/definitions/ErrorPayload"
        "409":
          description: "specified tunnel is still active: it has active connections"
          schema:
            $ref: "#/definitions/ErrorPayload"
        "500":
          description: "invalid operation"
          schema:
            $ref: "#/definitions/ErrorPayload"
  /clients/{client_id}/commands:
    get:
      tags:
        - "Commands"
      summary: "Return a short info about all client commands"
      description: "Return a list of all running and finished commands sorted by finished time in desc order with running commands at the beginning"
      produces:
        - "application/json"
      parameters:
        - name: "client_id"
          in: "path"
          description: "unique client id retrieved previously"
          required: true
          type: "string"
      responses:
        "200":
          description: "Successful Operation"
          schema:
            type: "object"
            properties:
              data:
                type: "array"
                items:
                  $ref: "#/definitions/JobSummary"
        "500":
          description: "Invalid Operation"
          schema:
            $ref: "#/definitions/ErrorPayload"
    post:
      tags:
        - "Commands"
      summary: "Execute a command by the rport client"
      description: "NOTE: if command limitation is enabled by an rport client then a full path command can be required to use. See https://github.com/cloudradar-monitoring/rport/blob/master/docs/command-execution.md for more details"
      produces:
        - "application/json"
      parameters:
        - name: "client_id"
          in: "path"
          description: "unique client id retrieved previously"
          required: true
          type: "string"
        - in: "body"
          name: "body"
          description: "remote command to execute by the rport client"
          required: true
          schema:
            type: "object"
            properties:
              command:
                type: "string"
                description: "remote command to execute by the rport client. NOTE: if command limitation is enabled by an rport client then a full path command can be required to use. See https://github.com/cloudradar-monitoring/rport/blob/master/docs/command-execution.md for more details"
              shell:
                type: "string"
                enum: [cmd, powershell]
                description: "command shell to use to execute the command. Is applicable only for windows clients. If not set 'cmd' is used by default"
              timeout_sec:
                type: "integer"
                description: "timeout in seconds to observe the command execution. If not set a default timeout (60 seconds) is used"
                default: 60
      responses:
        "200":
          description: "Successful Operation"
          schema:
            type: "object"
            properties:
              data:
                type: "object"
                properties:
                  jid:
                    type: "string"
                    description: "job id of the corresponding command"
        "400":
          description: "Invalid request parameters"
          schema:
            $ref: "#/definitions/ErrorPayload"
        "404":
          description: "Active client not found"
          schema:
            $ref: "#/definitions/ErrorPayload"
        "409":
          description: "Could not execute the command. Probably a previous command is still running"
          schema:
            $ref: "#/definitions/ErrorPayload"
        "500":
          description: "Invalid Operation"
          schema:
            $ref: "#/definitions/ErrorPayload"
  /clients/{client_id}/commands/{job_id}:
    get:
      tags:
        - "Commands"
      summary: "Return a detailed info about a specific client command"
      description: "Return a detailed info about a command by given job id"
      produces:
        - "application/json"
      parameters:
        - name: "client_id"
          in: "path"
          description: "unique client id retrieved previously"
          required: true
          type: "string"
        - name: "job_id"
          in: "path"
          description: "unique job id retrieved previously"
          required: true
          type: "string"
      responses:
        "200":
          description: "Successful Operation"
          schema:
            type: "object"
            properties:
              data:
                $ref: "#/definitions/Job"
        "404":
          description: "Command not found with given client id and job id"
          schema:
            $ref: "#/definitions/ErrorPayload"
        "500":
          description: "Invalid Operation"
          schema:
            $ref: "#/definitions/ErrorPayload"
  /commands:
    get:
      tags:
        - "Commands"
      summary: "Return a short info about all multi-client commands"
      description: "Return a list of all running and finished commands sorted by started time in desc order"
      produces:
        - "application/json"
      responses:
        "200":
          description: "Successful Operation"
          schema:
            type: "object"
            properties:
              data:
                type: "array"
                items:
                  $ref: "#/definitions/MultiJobSummary"
        "500":
          description: "Invalid Operation"
          schema:
            $ref: "#/definitions/ErrorPayload"
    post:
      tags:
        - "Commands"
      summary: "Execute a command on multiple rport clients"
      description: "NOTE: if command limitation is enabled by an rport client then a full path command can be required to use. See https://github.com/cloudradar-monitoring/rport/blob/master/docs/command-execution.md for more details"
      produces:
        - "application/json"
      parameters:
        - in: "body"
          name: "body"
          description: "properties and remote command to execute by rport clients"
          required: true
          schema:
            type: "object"
            properties:
              command:
                type: "string"
                description: "remote command to execute by rport clients. NOTE: if command limitation is enabled by an rport client then a full path command can be required to use. See https://github.com/cloudradar-monitoring/rport/blob/master/docs/command-execution.md for more details"
              client_ids:
                type: "array"
                items:
                  type: string
                description: "list of client IDs where to run the command. Min items is 2 if group_ids is not specified"
              group_ids:
                type: "array"
                items:
                  type: string
                description: "list of client group IDs. A command will be executed on all clients that belong to given group(s)"
              shell:
                type: "string"
                enum: [cmd, powershell]
                description: "command shell to use to execute the command. Is applicable only for windows clients. If not set 'cmd' is used by default"
              timeout_sec:
                type: "integer"
                description: "timeout in seconds to observe the command execution on each client separately. If not set a default timeout (60 seconds) is used"
                default: 60
              execute_concurrently:
                type: "boolean"
                description: "if true - execute the command concurrently on clients. If false - sequentially in order that is in 'client_ids'. By default is false"
                default: false
              abort_on_error:
                type: "boolean"
                description: "applicable only if 'execute_concurrently' is false. If true - abort the entire cycle if the execution fails on some client. By default is true"
                default: true
      responses:
        "200":
          description: "Successful Operation"
          schema:
            type: "object"
            properties:
              data:
                type: "object"
                properties:
                  jid:
                    type: "string"
                    description: "multi job id of the corresponding command"
        "400":
          description: "Invalid request parameters"
          schema:
            $ref: "#/definitions/ErrorPayload"
        "404":
          description: "Client not found"
          schema:
            $ref: "#/definitions/ErrorPayload"
        "500":
          description: "Invalid Operation"
          schema:
            $ref: "#/definitions/ErrorPayload"
  /commands/{job_id}:
    get:
      tags:
        - "Commands"
      summary: "Return a detailed info about a specific multi-client command"
      description: "Return a detailed info about a multi-client command by given id with child jobs as well"
      produces:
        - "application/json"
      parameters:
        - name: "job_id"
          in: "path"
          description: "unique multi job id retrieved previously"
          required: true
          type: "string"
      responses:
        "200":
          description: "Successful Operation"
          schema:
            type: "object"
            properties:
              data:
                $ref: "#/definitions/MultiJob"
        "400":
          description: "Command not found with a given multi job id"
          schema:
            $ref: "#/definitions/ErrorPayload"
        "500":
          description: "Invalid Operation"
          schema:
            $ref: "#/definitions/ErrorPayload"
  /ws/commands:
    get:
      tags:
        - "Commands"
      summary: "Web Socket Connection to execute a remote command on rport client(s)"
      description: "
      NOTE: swagger is not designed to document WebSocket API. This is a temporary solution.\n

      A new web socket is created for each new request to execute a remote command on rport client(s).\n
      Steps:\n
      1. To pass authentication - include \"access_token\" param into the url. The value is a jwt token that is created by 'login' API endpoint.\n
      2. Upgrades the current connection to Web Socket.\n
      3. Then server waits for an inbound message from UI client. It should be a JSON object `ExecuteCmdRequest`(see in 'Models')\n
      For example,\n
      {\n
        \"command\": \"/usr/bin/whoami\",\n
        \"client_ids\": [ \"qa-lin-debian9\", \"qa-lin-debian10\", \"qa-lin-centos8\", \"qa-lin-ubuntu18\", \"qa-lin-ubuntu16\" ],\n
        \"group_ids\": [ \"group-1\"],\n
        \"timeout_sec\": 30,\n
        \"execute_concurrently\": true\n
      }\n
      4. Validates the inbound msg. If it fails - server sends an outbound JSON message `ErrorPayload`(see in 'Models') and closes the connection.\n
      5. Server sends a given command to rport client(s) to execute.\n
      6. As soon as it gets a result from each rport client - it sends an outbound JSON message `Job`(see in 'Models').\n
         It can contain a non-empty 'error' field if server wasn't able to send the command to the rport client.\n
         Number of outbound messages is expected to be as many as rport clients. Or less if it's not a concurrent mode and 'abort_on_error' is turned on.\n
      7. As soon as all rport clients send back the result - connection is closed by server.\n
      8. Also, a current connection can be closed by UI client.\n

      There is a simple UI for testing. Try it out http://127.0.0.1:3000/api/v1/test/commands/ui\n
      "
      produces:
        - "application/json"
      parameters:
        - name: "access_token"
          in: "query"
          description: "JWT token that is created by 'login' API endpoint. Required to pass the authentication."
          required: true
          type: "string"
      responses:
        "200":
          description: "On success upgrades current connection to websocket"
          schema:
            type: "object"
  /clients-auth:
    get:
      tags:
        - "Rport Client Auth Credentials"
      summary: "Return all rport clients authentication credentials. Sorted by ID in asc order"
      description: ""
      produces:
        - "application/json"
      responses:
        "200":
          description: "Successful Operation"
          schema:
            type: "object"
            properties:
              data:
                type: "array"
                items:
                  $ref: "#/definitions/ClientAuth"
        "500":
          description: "Invalid Operation"
          schema:
            $ref: "#/definitions/ErrorPayload"
    post:
      tags:
        - "Rport Client Auth Credentials"
      summary: "Add new rport client authentication credentials"
      description: ""
      produces:
        - "application/json"
      parameters:
        - in: "body"
          name: "body"
          description: "Client auth credentials to add"
          required: true
          schema:
            $ref: "#/definitions/ClientAuth"
      responses:
        "204":
          description: "New client auth credentials added"
        "400":
          description: "Invalid parameters"
          schema:
            $ref: "#/definitions/ErrorPayload"
        "409":
          description: "Client auth credentials already exist. Err code: ERR_CODE_ALREADY_EXIST"
          schema:
            $ref: "#/definitions/ErrorPayload"
        "500":
          description: "Invalid Operation"
          schema:
            $ref: "#/definitions/ErrorPayload"
  /clients-auth/{client_auth_id}:
    parameters:
      - name: "client_auth_id"
        in: "path"
        description: "client auth ID"
        required: true
        type: "string"
      - name: "force"
        in: "query"
        description: "If true, delete a client auth even when it has active/disconnected clients."
        required: false
        type: "boolean"
    delete:
      tags:
        - "Rport Client Auth Credentials"
      summary:  "Delete rport client authentication credentials"
      description: ""
      responses:
        "204":
          description: "Client auth credentials deleted."
        "400":
          description: "Invalid parameters"
          schema:
            $ref: "#/definitions/ErrorPayload"
        "404":
          description: "Client auth credentials not found"
          schema:
            $ref: "#/definitions/ErrorPayload"
        "405":
          description: "Operation not allowed. Error codes: ERR_CODE_CLIENT_AUTH_SINGLE, ERR_CODE_CLIENT_AUTH_RO"
          schema:
            $ref: "#/definitions/ErrorPayload"
        "409":
          description: "Could not delete. Client Auth has active or disconnected bound client(s). Err code: ERR_CODE_CLIENT_AUTH_HAS_CLIENT"
          schema:
            $ref: "#/definitions/ErrorPayload"
        "500":
          description: "Invalid Operation"
          schema:
            $ref: "#/definitions/ErrorPayload"
  /client-groups:
    get:
      tags:
        - "Client Groups"
      summary: "Return all client groups"
      description: "Return a list of all existing client groups sorted by ID in asc order"
      produces:
        - "application/json"
      responses:
        "200":
          description: "Successful Operation"
          schema:
            type: "object"
            properties:
              data:
                type: "array"
                items:
                  $ref: "#/definitions/ClientGroup"
        "500":
          description: "Invalid Operation"
          schema:
            $ref: "#/definitions/ErrorPayload"
    post:
      tags:
        - "Client Groups"
      summary: "Create a new client group"
      description: "Create a new client group."
      produces:
        - "application/json"
      parameters:
        - in: "body"
          name: "client group"
          description: "Client group to create. Note: ClientGroup.client_ids field should not be set. It's read-only"
          required: true
          schema:
            $ref: '#/definitions/ClientGroup'
      responses:
        "201":
          description: "Successful Operation"
        "400":
          description: "Invalid request parameters"
          schema:
            $ref: "#/definitions/ErrorPayload"
        "500":
          description: "Invalid Operation"
          schema:
            $ref: "#/definitions/ErrorPayload"
  /client-groups/{group_id}:
    get:
      tags:
        - "Client Groups"
      summary: "Return a client group"
      description: "Return a detailed info about a client group by a given id"
      produces:
        - "application/json"
      parameters:
        - name: "group_id"
          in: "path"
          description: "unique client group ID"
          required: true
          type: "string"
      responses:
        "200":
          description: "Successful Operation"
          schema:
            type: "object"
            properties:
              data:
                $ref: "#/definitions/ClientGroup"
        "404":
          description: "Client group not found"
          schema:
            $ref: "#/definitions/ErrorPayload"
        "500":
          description: "Invalid Operation"
          schema:
            $ref: "#/definitions/ErrorPayload"
    put:
      tags:
        - "Client Groups"
      summary: "Save a client group"
      description: "Update an existing client group or save a new client group"
      produces:
        - "application/json"
      parameters:
        - name: "group_id"
          in: "path"
          description: "unique client group ID"
          required: true
          type: "string"
        - in: "body"
          name: "client group"
          description: "Client group to save. Note: ClientGroup.client_ids field should not be set."
          required: true
          schema:
            $ref: '#/definitions/ClientGroup'
      responses:
        "204":
          description: "Successful Operation"
        "400":
          description: "Invalid request parameters"
          schema:
            $ref: "#/definitions/ErrorPayload"
        "500":
          description: "Invalid Operation"
          schema:
            $ref: "#/definitions/ErrorPayload"
    delete:
      tags:
        - "Client Groups"
      summary: "Delete a client group"
      description: "Delete a client group by a given id"
      produces:
        - "application/json"
      parameters:
        - name: "group_id"
          in: "path"
          description: "unique client group ID"
          required: true
          type: "string"
      responses:
        "204":
          description: "Successful Operation"
        "500":
          description: "Invalid Operation"
          schema:
            $ref: "#/definitions/ErrorPayload"
  /users:
    get:
      tags:
        - "Users"
      summary: "Return all users"
      description: "Return a list of all existing users sorted by username in asc order"
      produces:
        - "application/json"
      responses:
        "200":
          description: "Successful Operation"
          schema:
            type: "object"
            properties:
              data:
                type: "array"
                items:
                  $ref: "#/definitions/UserGet"
        "500":
          description: "Invalid Operation"
          schema:
            $ref: "#/definitions/ErrorPayload"
    post:
      tags:
        - "Users"
      summary: "Create a new user"
      description: "Create a new user."
      produces:
        - "application/json"
      parameters:
        - in: "body"
          name: "user"
          description: "User to create."
          required: true
          schema:
            $ref: '#/definitions/UserPost'
      responses:
        "201":
          description: "Successful Operation"
        "400":
          description: "Invalid request parameters"
          schema:
            $ref: "#/definitions/ErrorPayload"
        "500":
          description: "Invalid Operation"
          schema:
            $ref: "#/definitions/ErrorPayload"
  /users/{user_id}:
    put:
      tags:
        - "Users"
      summary: "Update an user identified by the provided id"
      description: "Update an existing user"
      produces:
        - "application/json"
      parameters:
        - name: "user_id"
          in: "path"
          description: "unique user ID"
          required: true
          type: "string"
        - in: "body"
          name: "user"
          description: "User to update. Please note, that if you provide some key/values like `username: login1`, the not mentioned keys won't be changed, e.g. `password`"
          required: true
          schema:
            $ref: '#/definitions/UserPost'
      responses:
        "204":
          description: "Successful Operation"
        "400":
          description: "Invalid request parameters"
          schema:
            $ref: "#/definitions/ErrorPayload"
        "500":
          description: "Invalid Operation"
          schema:
            $ref: "#/definitions/ErrorPayload"
    delete:
      tags:
        - "Users"
      summary: "Delete an user"
      description: "Delete an client by a given id"
      produces:
        - "application/json"
      parameters:
        - name: "user_id"
          in: "path"
          description: "unique user  ID"
          required: true
          type: "string"
      responses:
        "204":
          description: "Successful Operation"
        "500":
          description: "Invalid Operation"
          schema:
            $ref: "#/definitions/ErrorPayload"
definitions:
  Tunnel:
    type: "object"
    properties:
      id:
        type: "string"
      lhost:
        type: "string"
        description: "server listens to this host"
      lport:
        type: "string"
        description: "server listens to this port"
      rhost:
        type: "string"
        description: "client proxies connection to this host"
      rport:
        type: "string"
        description: "client proxies connection to this port"
      lport_random:
        type: "boolean"
        description: "True if lport was chosen automatically with a random available port."
      scheme:
        type: "string"
        description: "URI scheme."
      acl:
        type: "string"
        description: "IP addresses who is allowed to use the tunnel. For example, '142.78.90.8,201.98.123.0/24,'."
  Client:
    type: "object"
    properties:
      id:
        type: "string"
      name:
        type: "string"
        description: "client name"
      os:
        type: "string"
        description: "client OS description"
      os_arch:
        type: "string"
        description: "client cpu architecture (ex: 386, amd64)"
      os_family:
        type: "string"
        description: "client OS family (ex: debian, alpine, Standalone Workstation)"
      os_kernel:
        type: "string"
        description: "client OS kernel (ex: linux, windows)"
      hostname:
        type: "string"
        description: "client hostname"
      ipv4:
        type: "array"
        items:
          type: string
        description: "list of IPv4 addresses of the client"
      ipv6:
        type: "array"
        items:
          type: string
        description: "list of IPv6 addresses of the client"
      tags:
        type: "array"
        items:
          type: string
      version:
        type: "string"
        description: "client version"
      address:
        type: "string"
        description: "client address"
      tunnels:
        type: "array"
        items:
          $ref: "#/definitions/Tunnel"
      connection_state:
        type: "string"
        enum: [connected, disconnected]
        description: "indicates whether a client is connected or disconnected"
      disconnected_at:
        type: "string"
        format: "data-time"
        description: "time when a client was disconnected. If null - it's connected"
      client_auth_id:
        type: "string"
        description: "rport client authentication ID that was used to connect to server"
  ClientGroup:
    type: "object"
    properties:
      id:
        type: "string"
        description: "Client Group ID"
      description:
        type: "string"
        description: "Client Group description"
      client_ids:
        type: "array"
        items:
          type: string
        description: "Read Only field. Shows active and disconnected clients that belong to this group."
      params:
        type: "object"
        description: "Parameters that define what clients belong to a given client group.\n

        Each parameter can be specified by:\n
        1. exact match of the property (ignoring case). For example, \"client_id\": [\"test-win2019-tk01\", \"qa-lin-ubuntu16\"]\n
        2. dynamic criteria using wildcards (ignoring case). For example, \"os_family\": [\"linux*\"]\n

        For more details please see https://github.com/cloudradar-monitoring/rport/blob/master/docs/client-groups.md\n"
        properties:
          client_id:
            type: "array"
            items:
              type: string
            description: "client ID(s)"
          name:
            type: "array"
            items:
              type: string
            description: "client name(s)"
          os:
            type: "array"
            items:
              type: string
            description: "client OS description(s)"
          os_arch:
            type: "array"
            items:
              type: string
            description: "client cpu architecture(s) (ex: 386, amd64)"
          os_family:
            type: "array"
            items:
              type: string
            description: "client OS family (ex: debian, alpine, Standalone Workstation)"
          os_kernel:
            type: "array"
            items:
              type: string
            description: "client OS kernel(s) (ex: linux, windows)"
          hostname:
            type: "array"
            items:
              type: string
            description: "client hostname(s)"
          ipv4:
            type: "array"
            items:
              type: string
            description: "client IPv4 address(es)"
          ipv6:
            type: "array"
            items:
              type: string
            description: "client IPv6 address(es)"
          tag:
            type: "array"
            items:
              type: string
            description: "client tag(s)"
          version:
            type: "array"
            items:
              type: string
            description: "client version(s)"
          address:
            type: "array"
            items:
              type: string
            description: "client address(es)"
          client_auth_id:
            type: "array"
            items:
              type: string
            description: "client auth ID(s)"
  ClientAuth:
    type: "object"
    properties:
      id:
        type: "string"
        description: "client auth ID"
      password:
        type: "string"
        description: "client auth password"
  JobStatus:
    type: "string"
    enum: &JOB_STATUS
      - "running"
      - "successful"
      - "unknown"
      - "failed"
  Job:
    type: "object"
    properties:
      jid:
        type: "string"
        description: "job ID"
      client_id:
        type: "string"
        description: "client ID"
      client_name:
        type: "string"
        description: "client name"
      pid:
        type: "integer"
        description: "process ID"
      status:
        type: "string"
        enum: *JOB_STATUS
        description: "command status"
      command:
        type: "string"
        description: "executed command"
      shell:
        type: "string"
        description: "command shell that was used to execute the command"
      started_at:
        type: "string"
        format: "data-time"
        description: "command start time"
      finished_at:
        type: "string"
        format: "data-time"
        description: "command finish time"
      created_by:
        type: "string"
        description: "API username who run the command"
      timeout_sec:
        type: "integer"
        description: "timeout in seconds that was used to observe the command execution"
      multi_job_id:
        type: "string"
        description: "multi-client job ID. If it is set then it means this command was initiated by running a multi-client job"
      error:
        type: "string"
        description: "is non-empty when it wasn't able to execute a command on rport client"
      result:
        type: "object"
        description: "command execution result"
        properties:
          stdout:
            type: "string"
            description: "process standard output"
          stderr:
            type: "string"
            description: "process standard error"
  JobSummary:
    type: "object"
    properties:
      jid:
        type: "string"
        description: "job ID"
      status:
        type: "string"
        enum: *JOB_STATUS
        description: "command status"
      finished_at:
        type: "string"
        format: "data-time"
        description: "command finish time"
  MultiJob:
    type: "object"
    properties:
      jid:
        type: "string"
        description: "multi-client job ID"
      started_at:
        type: "string"
        format: "data-time"
        description: "command finish time"
      created_by:
        type: "string"
        description: "API username who run the command"
      client_ids:
        type: "array"
        items:
          type: string
        description: "list of client IDs where the command was requested to run"
      group_ids:
        type: "array"
        items:
          type: string
        description: "list of client group IDs where the command was requested to run"
      command:
        type: "string"
        description: "executed command"
      shell:
        type: "string"
        description: "command shell that was used to execute the command"
      timeout_sec:
        type: "integer"
        description: "timeout in seconds that was used to observe the command execution on each client"
      concurrent:
        type: "boolean"
        description: "whether command was executed sequentially or concurrently on clients"
      abort_on_err:
        type: "boolean"
        description: "whether command was specified to abort or not the whole cycle, if the execution fails on some client. Not applicable if 'concurrent' is true"
      jobs:
        type: "array"
        items:
          $ref: "#/definitions/Job"
        description: "clients' jobs"
  MultiJobSummary:
    type: "object"
    properties:
      jid:
        type: "string"
        description: "multi-client job ID"
      started_at:
        type: "string"
        format: "data-time"
        description: "command finish time"
      created_by:
        type: "string"
        description: "API username who run the command"
  UserGet:
    type: "object"
    properties:
      username:
        type: "string"
        description: "Username"
      groups:
        type: "array"
        items:
          type: string
        description: "List of groups to which the current user belongs"
  UserPost:
    type: "object"
    properties:
      username:
        type: "string"
        description: "Username for the credentials pair"
      password:
        type: "string"
        description: "Password for the credentials pair"
      groups:
        type: "array"
        items:
          type: string
        description: "List of groups to which the current user belongs"
  ErrorPayload:
    type: "object"
    properties:
      errors:
        type: "array"
        items:
          $ref: "#/definitions/ErrorPayloadItem"
  ErrorPayloadItem:
    type: "object"
    properties:
      code:
        type: "string"
      title:
        type: "string"
      detial:
        type: "string"
  ExecuteCmdRequest:
    description: "Request that contains a remote command to execute by rport client(s) and other related properties"
    type: "object"
    properties:
      command:
        type: "string"
        description: "remote command to execute by rport client(s). NOTE: if command limitation is enabled by an rport client then a full path command can be required to use. See https://github.com/cloudradar-monitoring/rport/blob/master/docs/command-execution.md for more details"
      client_ids:
        type: "array"
        items:
          type: string
        minItems: 1
        description: "list of client IDs where to run the command"
      shell:
        type: "string"
        enum: [cmd, powershell]
        description: "command shell to use to execute the command. Is applicable only for windows clients. If not set 'cmd' is used by default"
      timeout_sec:
        type: "integer"
        description: "timeout in seconds to observe the command execution on each client separately. If not set a default timeout (60 seconds) is used"
      execute_concurrently:
        type: "boolean"
        description: "applicable only when multiple clients are specified. If true - execute the command concurrently on clients. If false - sequentially in order that is in 'client_ids'. By default is false"
      abort_on_error:
        type: "boolean"
        description: "applicable only when multiple clients are specified. Applicable only if 'execute_concurrently' is false. If true - abort the entire cycle if the execution fails on some client. By default is true"
